#!/usr/bin/env node
const app = require('../app');
const debug = require('debug')('myapp:www');
const http = require('http');
const colors = require('colors');


// Get the port of the environment and store it in Express
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// create express server
var server = http.createServer(app);

// Listening on the provided port, on all network interfaces
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port to a number, a string or a false one
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

// Manage specific listening errors with the help of messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listen" event
function onListening() {
  console.log(`listening on ${port} http://localhost:${port}/`.black.bgCyan);
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
